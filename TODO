Known Bugs:
 * ??? Dot is not always restored properly (e.g. after closing file)
   need test case!!!
 * Null-byte in strings not always handled transparently
 * saving another user's file will only preserve the user when run as root
   (WON'T FIX!?)
 * Scintilla/Scinterm: sometimes <TAB> indents too much (see e.g. state declarations)
 * adding a new buffer with syntax highlighting screws up styles:
   obviously they are attached to the view instead of the document
 * reversing EWfilename$ (save as) does not work!
 * crashes on large files: S^EM^X$ (regexp: .*)

Features:
 * properly support Unicode encodings and the character-based model
   * link against libncursesw if possible
   * translate documents to Unicode strings
   * a position refers to a character/codepoint
 * refactor lexer macro library using new possibilities:
   fix the styling bug in the process
 * protect ED hook executions (process like "(<x>M0$)").
   Perhaps use a long name for ED registers now. How about "ED"?
 * Progress indication in commandline cursor
 * undo-tokens per char limit (additional infinite loop safety)
 * Command to free Q-Register (remove from table)
 * autocompletion of long Q-Reg names
 * Q-Register aliasing/linking
 * EC command
   * perhaps support Bash completions
 * TECO syntax highlighting
 * multiline commandline
   * perhaps use Scintilla view as mini buffer
 * improve GTK interface
 * modifier for toggling string building processing
 * ??? optional modified-detection based on hash sums ???
 * backup files, or even better Journal files:
   could write a Macro file for each modified file containing
   only basic commands (no loops etc.). it is removed when the file is
   saved. in case of an abnormal program termination the
   journal file can be replayed.
 * Add special Q-Register for dot:
   Would simplify inserting dot with string building and saving/restoring
   dot on the QReg stack
 * Windows: look for stdlib macros relative to the binary path (just
   like teco.ini is found): perhaps by introducing special characters
   in the default SCITECOPATH or hardcoding the defaults
 * automatic EOL detection of buffers; easy EOL setting
 * refactor State::Error into separate C file and namespace

Optimizations:
 * prevent command-line flickering when using function key macros.
 * check if Scinterm refreshing is optimal
 * refactor search commands (create proper base class)
 * refactor match-char state machine using MicroStateMachine class
 * simplify parser (static jump tables are unnecessary!)
 * search and other commands can be significantly optimized:
   in batch mode, or in loops/macros there is no need to rematch every character!
   -> immediate vs. non-immediate command execution
   * can be handled automatically in StateExpectString
 * batch mode can be optimized by preventing unnecessary allocations/deallocations
   for UNDO token creation. Check for undo.enabled in constructors like
   undo.push_msg|var() where the undo token destruction does not have any
   significant side effects.
 * use "friend" functions for C-linkage callbacks that must access a class'
   member instead of making that member public
 * when setting/getting Q-Reg string, use special dummy Scintilla view

Documentation:
 * Code docs (Doxygen)
 * clean up/fix generate-docs.tes
